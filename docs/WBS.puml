@startwbs

<style>
node {
    Padding 12
    Margin 10
    HorizontalAlignment center
    MaximumWidth 120
    Shadowing 0
    
    LineColor royalblue
    BackgroundColor lightblue
    
    :depth(0) {
        LineColor red
        BackgroundColor tomato
    }

    :depth(1) {
        LineColor green
        BackgroundColor lightgreen
    }

    :depth(2) {
        LineColor purple
        BackgroundColor orchid
    }

    :depth(3) {
        LineColor Darkorange
        BackgroundColor orange
    }
}

arrow {
    LineColor royalblue 
}


</style>

* Treacherous Tetris WBS

** G1 - Home Page
*** FR1 - Generate.Room.Form
**** Design
***** FR1_1 Design generate room button UI for homepage
**** Implementation
***** FR1_2 Push generate room button on homepage UI
*** FR5 - Join.Room.Form
**** Design
***** FR5_1 Design join room button for homepage
**** Implementation
***** FR5_2 Push join room button to hompepage UI

** G2 - Generate Room
*** FR2 - Generate.Game.Session
**** Design
***** FR2_1 Design the system so that the server generates a game room ID
***** FR2_2 Design the system so that the server opens up its sockets to other clients to connect
**** Implementation
***** FR2_3 Open up the server socket connection to other clients
' ***** Capture the information from UI form
' ***** Verify the information on the UI form
' ****** Notify the user of any field was empty
***** FR2_4 Generate a link for joining room
*** FR3 - Start.WebRTC.Session
**** Design
***** FR3_1 Design the system so that the server listens for incoming requests for a WebRTC Session
**** Implementation
***** FR3_2 Listen for all clients who are trying to connect to the room host via WebRTC
*** FR4 - Start.Text.Chat.Session
**** Design
***** FR4_1 Design the system so that the server opens up its sockets to other clients
**** Implementation
***** FR4_2 Establish a Websocket API for bidirectional communication between the client and server

** G3 - Join Room
*** FR6 - Connect.Game.Session
**** Design
***** FR6_1 Design server to connect to the socket
**** Implementation
***** FR6_2 Verify that the room link belongs a to a valid existing room
***** FR6_3 Implement scoketio endpoint logic to connect to the existing session
*** FR7 - Connect.WebRTC.Session
**** Design
***** FR7_1 Design the server in a way that it would verify connections between users, and upon verification, give permission to let the users connect
**** Implementation
***** FR7_2 Create a request to the server indicating that the user wishes to connect to the room host via WebRTC
***** FR7_3 The server should that the correct user is trying to connect with the correct room host
***** FR7_4 Establish peer-to-peer connection between the user and the room host using WebRTC 
*** FR8 - Connect.Chat.Session
**** Design
***** FR8_1 Design the system so that the client sends a request to the server to connect to its open socket
**** Implementation
***** FR8_2 The client connects to the socket on the server for the corresponding room

** G4 - Room Status Page
*** FR9 - Host.Edit.Game.Settings
**** Design
***** FR9_1 Design UI for game settings which is available before the game start
**** Implementation
***** FR9_2 Capture the settings information entered by the host
***** FR9_3 Sends the settings information to the server 
*** FR10 - Host.Start.Game
**** Design
***** FR10_1 Design UI button for starting the game
**** Implementation
***** FR10_2 Push the UI button for starting the game to the page
*** FR11 - Player.Edit.Self.Settings
**** Design
***** FR11_1 Design UI for game settings with limited options than the host to players
**** Implementation
***** FR11_2 Capture the settings information from UI
***** FR11_3 Send players' setting information to the server 
*** FR12 - Display.Chatbox
**** Design
***** FR12_1 Design a UI for Chat box
**** Implementation
***** FR12_2 Enable chat box for all players in a game room
***** FR12_3 Broadcast messages from each client (players) to all players in the room
*** FR13 - Display.Game.Settings
**** Design
***** FR13_1 Design Settings display in a game room
**** Implementation
***** FR13_2 Send request to the server to capture the last settings update for a game session
***** FR13_3 Display the updated settings to all players
*** FR14 - Display.Player.Connection.Status
**** Design
***** FR14_1 Design simple icons for indicating player connection status
**** Implementation
***** FR14_2 For each player in the room, check their connection status
***** FR14_3 Push the icon UI to the game game room page depending on the player's connection status
*** FR15 - Display.Players.Information
**** Design
***** FR15_1 Design UI for player information, such as username, and block color
**** Implemendtation
***** FR15_2 Push the player information UI to the game room page
*** FR16 - Display.Game.Canvas
**** Design
***** FR16_1 Design the game canvas using p5.js
**** Implementation
***** FR16_2 Push the game canvas to the game room page
*** FR17 - Display.Emergency.Buttons
**** Design
***** FR17_1 Design UI for an Emergency button
**** Implementation
***** FR17_2 Push Emergency button to game room page
***** FR17_3 Display the button to all players in a game room
*** FR18 - Display.Voting.Modal
**** Design
***** FR18_1 Design UI for displaying the voting modal
**** Implementation
***** FR18_2 Push the voting modal UI to the game room page
*** FR19 - Display.Sabotage.Button
**** Design
***** FR19_1 Design a button UI for sabotaging
**** Implementation
***** FR19_2 Push sabotage button to the game room page
***** FR19_3 Display the button to all players in the game room page
*** FR20 - Send.Inputs.Server
**** Design
***** FR20_1 Design key mapping and other button press listeners for collecting client input
**** Implementation
***** FR20_2 Add logic to send input events to game server for each key/button map
*** FR21 - Display.Room.Full.Message
**** Design
***** FR21_1 Design a UI for Room Full Error message
**** Implementation
***** FR21_2 Get the information about the number of players in a room from the server
***** FR21_3 Display the error message when a join room request is received for a full game room 

** G5 - Game Canvas
*** FR22 - Display.Canvas
**** Design
***** FR22_1 Design UI of the game canvas including styles of the tetris blocks
**** Implementation
***** FR22_2 Push tetris block display logic to the UI Canvas layer
***** FR22_3 Add logic to make the Canvas respond to server updates
*** FR23 - Display.ProgressBar
**** Design
***** FR23_1 Design UI of the Game Progress Bar
**** Implementation
***** FR23_2 Push ProgressBar display logic to the UI Canvas layer
*** FR24 - Display.GameBoard
**** Design
***** FR24_1 Design UI of the game board within the Canvas
**** Implementation
***** FR24_2 Push game board display logic to UI Canvas Layer
***** FR24_3 Add logic to adjust gameboard size according to number of players at game start

** G6 - Game Server
*** FR25 - Start.Game
**** Design
***** FR25_1 Design Socket.io Start Game event
**** Implementation
***** FR25_2 Add server logic to start a game instance given event arguments
*** FR26 - Update.Player.Input
**** Design
***** FR26_1 Design Socket.io Input events for a game instance
**** Implementation
***** FR26_2 Add server logic to apply user inputs from input event to a game instance
*** FR27 - Update.Frame
**** Design
***** FR27_1 Design game instance stimulus response sequences
**** Implementation
***** FR27_2 Add server logic to increment game state periodically and after player input
*** FR28 - Send.Game.State
**** Design
***** FR28_1 Design a socket.io event to broadcast game updates and format of the update packet
**** Implementation
***** FR28_2 Add server logic to broadcast game updates to connected clients
*** FR29 - Send.Voting.State
**** Design
***** FR29_1 Design socket.io event to broadcast voting state and format of the voting state packet
**** Implementation
***** FR29_2 Add server logic to broadcast voting updates to connected clients
*** FR30 - Send.Voting.Button
**** Design
***** FR30_1 Design UI for Voting button
**** Implementation
***** FR30_2 Push the voting button to the game room
*** FR31 - Handle.Voting.Results
**** Design
***** FR31_1 Design socket.io event to broadcast end result to all connected clients
**** Implementation
***** FR31_2 Add server game logic to determine the end result of the game 
*** FR32 - Send.Results
**** Design
***** FR32_1 Design UI for showing End game message
***** FR32_2 Design logic for determining the game end
**** Implementation
***** FR32_3 Get information about the game state from the server
***** FR32_4 Display the end game message to all players

** G7 - Voting System
*** FR33 - Initialize.Timer
**** Design
***** FR33_1 Design a timer that counts down from 30 seconds
**** Implementation
***** FR33_2 Begin count down of the timer
***** FR33_3 Notify the server upon timer value at 0
*** FR34 - Count.Votes
**** Design
***** FR34_1 Design Socket.io Input endpoints for voting endpoint
**** Implementation
***** FR34_2 Upon receiving votes from each player, count the votes on the server
*** FR35 - Handle.Ties
**** Design
***** FR35_1 Design logic so that the server recognizes a tie when voting is complete
**** Implementation
***** FR35_2 Add server logic to recognize ties in a vote, and update the state accordingly
*** FR36 - Send.VoteData
**** Design
***** FR36_1 Design Socket.io to send back the vote data to all players in a game room
**** Implementation
***** FR36_2 Send voting results to all connected clients in the game room
*** FR37 - Return.VoteData
**** Design
***** FR37_1 Design logic for displaying voting results to all players in a game room
**** Implementation
***** FR37_2 Get information about the voting result from the server
****** FR37_3 Display the players ID who received the majority of votes
****** FR37_4 Display tie status if two players had the same number of votes 

** G8 - User Help Page
*** FR38 - View.Help.Page
**** Design
***** FR38_1 Design a UI for Help page
**** Implementation
***** FR38_2 Add the information about the game rules and features in the help page in HTML format
***** FR38_3 Make the help page accessible to all visitors


@endwbs