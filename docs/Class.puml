@startuml Class

class GameData {
    + fallingPieces: Map[PlayerId, GamePiece]
    + progressState: int
    + timer: double
    + gameBoard: int[]
    + playerData: Player[]
    + gamePhase: GamePhase
}

    note right of GameData
        Object broadcasted from server to client
    end note

package Client {
  class HomePage {
      + onCreateButtonClicked() : void
      + onJoinButtonClicked() : void
      + onHelpButtonClicked() : void
      + requestJoinRoom(code): void
  }

  class HelpPage {
      + getHelpInfo(): string
      + tetrisRulesText: string
      + helpChatBoxText: string
      + helpVoiceChatText: string
      + helpSettingsText: string
  }

  class RoomPage{
    + onHelpButtonClicked() : void
    + displayGameViewComponent(): void
  }


  class GameCanvasComponent {
      + onGameDataReceived(gameData: Object): void
      + draw(): void
      + disableKeyInput(): void
      + render(): void
      + onKeyPressed(direction): void
  }
  class GameButtonsComponent{
    + isImposter() : bool
    + onEmergencyButtonClicked() : void
    + onSabotageButtonClicked() : void
    + disableButtons(): void
    + showSabotageButton(): void
    + render(): void
  }

  class VoteComponent{
    + remainingTime: int
    + onPlayerSelected(): void
    + render(): void
  }

  class ChatBoxComponent{
    + onSendButtonClicked() : void
    + onMessageRecieved(): void
    + render(): void
  }

  class GameSettingsComponent {
      + isHost(): bool
      + onSpeedChanged(): void
      + onStartGamePressed(): void
      + render(): void
  }

  class HostSettingsComponent {
      + disableForm(): void
      + onSpeedChanged() : void
      + onStartGamePressed() : void
      + render(): void
  }
  
  class PlayerSettingsComponent {
      + onNickNameChanged() : void
      + onColorChanged() : void
      + render(): void
  }
  
  class GameViewComponent {
      + onKeyPressed(direction) : void
      + sendInputEvent(playerID, eventType): void
      + showVoteComponent(): void
      + hideVoteComponent(): void
      + disableInputs(): void
      + enableInputs(): void
      + render(): void
  }

  class PlayerInfoComponent {
    + render(): void
  }
  
  RoomPage "1" *-- "1" PlayerInfoComponent: displays
  RoomPage "1" *-- "1" ChatBoxComponent: displays
  RoomPage "1" o-- "0..1" GameSettingsComponent: displays
  RoomPage "1" o-- "0..1" GameViewComponent: displays
    
  GameSettingsComponent "1" *--"1" HostSettingsComponent: displays
  GameSettingsComponent "1" *-- "1" PlayerSettingsComponent: displays

  GameViewComponent "1" *-- "1" GameCanvasComponent : displays
  GameViewComponent "1" *-- "1" GameButtonsComponent : displays
  GameViewComponent "1" o-- "0..1" VoteComponent: displays
  
  
  HomePage -- RoomPage: navigate
  HomePage -- HelpPage: navigate
  RoomPage -- HelpPage: navigate

}

package Server {
  class SocketIOService {
      + generateRoom(): json
      + connect(): void
      + joinRoom(): json
      + getChatHistory(roomCode): json
      + sendChatMessage(roomCode,userID, msg): json
      + broadcastNewMessage(userID, msg): json
      + startGame(room): json
      + changeSpeed(room, speed): void
      + changeNickName(room, pID, nickName) : void
      + changeColor(room, pID, color) : void
      + getGameData(room): json 
      + broadcastGameData(): json
      + applyGameInput(room, userID): void
      + tryStartVoting(room, playerID): void
      + captureVote(room, playerID, targetPlayerID): void
  } 

  class RoomSession {
      + isFull: bool
      + code: string
      + startGame(): void
      + addPlayer(): void
      + generateRoomCode(): void
      + getChatHistory(): json
  }

  class GameSession {
      + players: Player[]
      + gameState: GameState
      + phase: GamePhase
      + getFallingPieces(): Map(PlayerId, GamePiece)
      + isValid(GamePiece): bool   
      + run(): void  
      + updateFrame(): void
      + startVoting(): void
      + sabotage(): void
      + sendGameData(): void
      + getGameData(): void
      + generateRandomValidPiece(): GamePiece
      + inputEvent(PlayerId, eventType): void
      + resumeGame(): void
      + notifyChange(): void
      + applyGameInput(userID, direction): void
  }

    note right of GameSession::run
        main game loop
    end note
    
    note right of GameSession::update
        updates the game state given time passed
    end note
    
    note right of GameSession::inputEvent
        updates the game state given player input
    end note

  enum GamePhase {
    STARTING
    PLAYING
    VOTING 
    PAUSED
    FINISHED
  }

  class ChatSession {
      + chatHistory: string[]
      + addChatMessage(userID, msg): void
      + getChatHistory(): void
  }

  class WebRTCSession{
      + connectToHost(): void
  }

  class VoteSession{
      + voteCount: object
      + isTie: bool
      + timer: double
      + onTimerComplete(): void
      + onVoteComplete(results: object): void
      + captureVote(playerID, targetPlayerID): void
  }

  enum PlayerType {
      IMPOSTER
      CIVILIAN
      EXILED
  }

  class Player {
      + id: int
      + type: PlayerType
      + playerName: string
      + playerColor: string
      + isHost: bool
      + hasEmergency: bool
      + isConnect: bool
      + currentPiece: GamePiece
      + nextPiece: GamePiece
      + changePlayerType(PlayerType): void
  }

  class GameState {
      + progressState: int
      + timer: double
      + speed: double
      + gameBoard: int[[]]
      + checkRowComplete(): void
      + addFixedPiece(GamePiece, PlayerId): bool
      + deleteRow(): void
      + isValid(GamePiece): bool
      + changeProgress(): void
  }
  
  class GamePiece {
      + type: GamePieceType
      + orientation: int
      + getCells() : arr[[]]
      + ofx: int
      + ofy: int
  }

  enum GamePieceType {
      O
      J
      L
      T
      S
      Z
      I
  }
  
  SocketIOService "1" -- "0..*" RoomSession: uses

  RoomSession "1" o-- "0..1" GameSession : contains
  RoomSession "1" o-- "0..1" ChatSession : contains
  RoomSession "1" o-- "0..1" WebRTCSession :contains
  
  GameSession "1" o-- "0..1" VoteSession : contains

  GameSession "1" *-- "1" GameState: owns
  GameSession "1" *-- "0..5" Player: owns

  Player "1" *-- "0..2" GamePiece: owns

}

@enduml
